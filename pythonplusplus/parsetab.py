
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSleftINCREMENTleftEQUALSEQUALS INCREMENT NAME NEWLINE NUMBER PLUSprogram : statement_liststatement_list : statement_list statement\n    | statementstatement : expressionexpression : NAME EQUALS expressionexpression : NAME INCREMENTexpression : expression PLUS expressionexpression : NAMEexpression : NUMBER'
    
_lr_action_items = {'NAME':([0,2,3,4,5,6,7,8,9,10,11,12,],[5,5,-3,-4,-8,-9,-2,5,5,-6,-7,-5,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,],[6,6,-3,-4,-8,-9,-2,6,6,-6,-7,-5,]),'$end':([1,2,3,4,5,6,7,10,11,12,],[0,-1,-3,-4,-8,-9,-2,-6,-7,-5,]),'PLUS':([4,5,6,10,11,12,],[8,-8,-9,-6,-7,-5,]),'EQUALS':([5,],[9,]),'INCREMENT':([5,],[10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,7,]),'expression':([0,2,8,9,],[4,4,11,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',12),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',16),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',17),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',24),
  ('expression -> NAME EQUALS expression','expression',3,'p_expression_assign','parser.py',28),
  ('expression -> NAME INCREMENT','expression',2,'p_expression_increment','parser.py',32),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',36),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',40),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',44),
]
