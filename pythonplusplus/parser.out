Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> expression
Rule 5     expression -> NAME EQUALS expression
Rule 6     expression -> NAME INCREMENT
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> NAME
Rule 9     expression -> NUMBER

Terminals, with rules where they appear

EQUALS               : 5
INCREMENT            : 6
NAME                 : 5 6 8
NEWLINE              : 
NUMBER               : 9
PLUS                 : 7
error                : 

Nonterminals, with rules where they appear

expression           : 4 5 7 7
program              : 0
statement            : 2 3
statement_list       : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression
    (5) expression -> . NAME EQUALS expression
    (6) expression -> . NAME INCREMENT
    (7) expression -> . expression PLUS expression
    (8) expression -> . NAME
    (9) expression -> . NUMBER

    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression
    (5) expression -> . NAME EQUALS expression
    (6) expression -> . NAME INCREMENT
    (7) expression -> . expression PLUS expression
    (8) expression -> . NAME
    (9) expression -> . NUMBER

    $end            reduce using rule 1 (program -> statement_list .)
    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    statement                      shift and go to state 7
    expression                     shift and go to state 4

state 3

    (3) statement_list -> statement .

    NAME            reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> expression .
    (7) expression -> expression . PLUS expression

    NAME            reduce using rule 4 (statement -> expression .)
    NUMBER          reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 8


state 5

    (5) expression -> NAME . EQUALS expression
    (6) expression -> NAME . INCREMENT
    (8) expression -> NAME .

    EQUALS          shift and go to state 9
    INCREMENT       shift and go to state 10
    PLUS            reduce using rule 8 (expression -> NAME .)
    NAME            reduce using rule 8 (expression -> NAME .)
    NUMBER          reduce using rule 8 (expression -> NAME .)
    $end            reduce using rule 8 (expression -> NAME .)


state 6

    (9) expression -> NUMBER .

    PLUS            reduce using rule 9 (expression -> NUMBER .)
    NAME            reduce using rule 9 (expression -> NUMBER .)
    NUMBER          reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)


state 7

    (2) statement_list -> statement_list statement .

    NAME            reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 8

    (7) expression -> expression PLUS . expression
    (5) expression -> . NAME EQUALS expression
    (6) expression -> . NAME INCREMENT
    (7) expression -> . expression PLUS expression
    (8) expression -> . NAME
    (9) expression -> . NUMBER

    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    expression                     shift and go to state 11

state 9

    (5) expression -> NAME EQUALS . expression
    (5) expression -> . NAME EQUALS expression
    (6) expression -> . NAME INCREMENT
    (7) expression -> . expression PLUS expression
    (8) expression -> . NAME
    (9) expression -> . NUMBER

    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    expression                     shift and go to state 12

state 10

    (6) expression -> NAME INCREMENT .

    PLUS            reduce using rule 6 (expression -> NAME INCREMENT .)
    NAME            reduce using rule 6 (expression -> NAME INCREMENT .)
    NUMBER          reduce using rule 6 (expression -> NAME INCREMENT .)
    $end            reduce using rule 6 (expression -> NAME INCREMENT .)


state 11

    (7) expression -> expression PLUS expression .
    (7) expression -> expression . PLUS expression

    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    NAME            reduce using rule 7 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 7 (expression -> expression PLUS expression .)
    $end            reduce using rule 7 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 8 ]


state 12

    (5) expression -> NAME EQUALS expression .
    (7) expression -> expression . PLUS expression

    PLUS            reduce using rule 5 (expression -> NAME EQUALS expression .)
    NAME            reduce using rule 5 (expression -> NAME EQUALS expression .)
    NUMBER          reduce using rule 5 (expression -> NAME EQUALS expression .)
    $end            reduce using rule 5 (expression -> NAME EQUALS expression .)

  ! PLUS            [ shift and go to state 8 ]

